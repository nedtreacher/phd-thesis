# Python Code for Data Analysis {#sec-python}

## Code Repository

The code used for general analysis of field-effect transistor devices in this thesis was written with Python 3.8.8. Contributors to the code used include Erica Cassie, Erica Happe, Marissa Dierkes and Leo Browning. The code is located on GitHub and the research group OneDrive, and is available on request.

## Atomic Force Microscope Histogram Analysis {#sec-histogram-analysis}

The purpose of this code is to analyse atomic force microscope (AFM) images of carbon nanotube networks in .xyz format taken using an atomic force microscope and processed in Gwyddion (see @sec-afm-characterisation). It was originally designed by Erica Happe in Matlab, and adapted by Marissa Dierkes and myself for use in Python. 

$$
f(x) = k_1\exp{\Bigg(-\frac{{(x-m_1)}^{2}}{{2s_1}^{2}}\Bigg)} + k_2\exp{\Bigg(-\frac{{(x-m_2)}^{2}}{{2s_2}^{2}}\Bigg)} + ...
$${#eq-lin-combo-gaussian}

The .xyz data is initially sorted into bins with 0.15 nm size. The bin with the maximum number of counts is set at 0 nm, as this peak represents the mean of the surface roughness of the bare silicon. The parameters $m_i$, $s_i$, $k_i$ (i = 1, 2, 3) are used with objective function @eq-lin-combo-gaussian to overlay the data with normal distributions. These fitting parameters represent the mean (m), standard deviation (s) and amplitude (k) of each normal distribution. We can make approximations of some of these fitting parameters using the histogram data. 

$k_1$ is taken to be the maximum y-value of the data being fitted, $m_1$ is set to zero (used as a point of reference) and $s_1$ is taken as one-third of the difference between $m_1$ and the x-value of the first datapoint where the y-value is greater than 1% of $k_1$ (approximating one standard deviation). We find the distribution given by these values using @eq-lin-combo-gaussian, and subtract it from the existing dataset. 

Then, using the analysis technique outlined by Vobornik *et al.* [@Vobornik2023] in Gwyddion, we manually find estimates for the mean $m_2$ and standard deviation $s_2$ of the carbon nanotube bundle distribution. We then take $k_2$ to be the maximum y-value of this modified dataset, and $m_1$ to be the x-value of the maximum y-value. We then set $k_2$ so that the height of the resulting distribution at one standard deviation matches the height of the .xyz data histogram. We take this distribution, and subtract it from the existing dataset. 

The code also allows for discretely binning continuous data from fitted normal distributions and examining the proportion of counts above or below a particular height. 2.9 nm is roughly where 2 bundles with average size 1.45 nm can start to be present, and is used as an estimate of the boundary value between single-tube bundle diameters and multi-tube bundle diameters.


$$
f(x) = k_1\exp{\Bigg(-\frac{t}{{\tau}_{1}}\Bigg)} + k_2\exp{\Bigg(-\frac{t}{{\tau}_{2}}\Bigg)} + ... + c
$${#eq-lin-combo-exp-decay}